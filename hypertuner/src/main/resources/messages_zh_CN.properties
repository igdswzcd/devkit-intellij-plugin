#\u5B89\u88C5
plugins_hyper_tuner_install_title=\u5B89\u88C5\u6027\u80FD\u5206\u6790\u5DE5\u5177
plugins_hyper_tuner_install_failedLink=\u6B64\u5904
plugins_hyper_tuner_install_failedSuffix=</a>\u91CD\u8BD5\u3002</html>
plugins_hyper_tuner_install_failedPrefix=<html><span>\u8BF7\u53C2\u8003<a style="color:rgb(47, 101, 202);"href="https://support.huaweicloud.com/faq-paplugin-kunpengdevps/kunpengpaplugin_10_0029.html">\u5B98\u7F51</a>\u4E0A\u7684\u5B89\u88C5\u5931\u8D25\u53EF\u80FD\u539F\u56E0\u8FDB\u884C\u5904\u7406</span><br />\u5DE5\u5177\u5B89\u88C5\u5931\u8D25\u3002\u70B9\u51FB<a href="%23">
plugins_common_button_cancel=\u53D6\u6D88
plugins_hyper_tuner_shell_install=#!/bin/bash\n \
    function help_info(){\n \
    echo "usage bash install_tuning.sh\n \
    -a arm\n \
    -b x86\n \
    -c key\n \
    -h help infomation"\n \
    }\n \
    #get opts\n \
    while getopts ":a:b:c:h" args\n \
    do\n \
    case $args in\n \
    a)\n \
    arm=$OPTARG\n \
    ;;\n \
    b)\n \
    x86=$OPTARG\n \
    ;;\n \
    c)\n \
    key=$OPTARG\n \
    ;;\n \
    h)\n \
    help_info\n \
    exit 0\n \
    ;;\n \
    ?)\n \
    echo "unknow option '-$OPTARG'"\n \
    help_info\n \
    exit 2\n \
    ;;\n \
    esac\n \
    done\n \
    path=$(cd `dirname $0`;pwd)\n \
    source /etc/profile\n \
    touch $path/install_tuning.log\n \
    chmod 600 $path/install_tuning.log\n \
    function clean() {\n \
    rm -rf $path/install_tuning_run.sh\n \
    rm -rf $path/install_tuning.sh\n \
    }\n \
    function Logger() {\n \
    if [ "Error" == $1 ]; then\n \
    clean\n \
    echo -e "\\e[1;31m`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 \\e[0m "\n \
    echo "failed" > $path/install_tuning.log\n \
    else\n \
    echo -e "`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 "\n \
    fi\n \
    logger -t "devkit-ide" [$1] [$2] $3\n \
    }\n \
    if [ "$USER" != "root" ]; then\n \
    echo -e "\\e[1;31mPlease input your root password to start installing:\\e[0m"\n \
    fi\n \
    su - root -c "cd $path && bash install_tuning_run.sh -a $arm -b $x86 -c $path -d ${key} "$USER""\n \
    if [ $? == 1 ];then\n \
    Logger Error "Check Password" "Check Password failed, please check detail."\n \
    exit 1\n \
    fi
plugins_hyper_tuner_shell_installRun=#!/bin/bash\n \
    function help_info(){\n \
    echo "usage bash install_tuning.sh\n \
    -a arm\n \
    -b x86\n \
    -c path\n \
    -d key\n \
    -h help infomation"\n \
    }\n \
    #get opts\n \
    while getopts ":a:b:c:d:h" args\n \
    do\n \
    case $args in\n \
    a)\n \
    arm=$OPTARG\n \
    ;;\n \
    b)\n \
    x86=$OPTARG\n \
    ;;\n \
    c)\n \
    path=$OPTARG\n \
    ;;\n \
    d)\n \
    key=$OPTARG\n \
    ;;\n \
    h)\n \
    help_info\n \
    exit 0\n \
    ;;\n \
    ?)\n \
    echo "unknow option '-$OPTARG'"\n \
    help_info\n \
    exit 2\n \
    ;;\n \
    esac\n \
    done\n \
    function clean() {\n \
    rm -rf $path/install_tuning_run.sh\n \
    rm -rf $path/install_tuning.sh\n \
    }\n \
    function ackclean(){\n \
    echo "The installation package path is $path"\n \
    echo -n "Are you sure you want to delete the installation package?(y/n,n is default)"\n \
    read ack\n \
    if [ "y" == "${ack}" ] || [ "Y" == "${ack}" ]; then\n \
    rm -rf $path/Hyper*Tuner*linux*\n \
    rm -rf $path/KEYS.txt\n \
    fi\n \
    }\n \
    function Logger() {\n \
    if [ "Error" == $1 ]; then\n \
    clean\n \
    echo -e "\\e[1;31m`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 \\e[0m "\n \
    echo "failed" > $path/install_tuning.log\n \
    echo "The log path is /var/log/messages. You can delete installation package with\n \
    rm -rf $path/Hyper*Tuner*linux*\n \
    rm -rf $path/KEYS.txt"\n \
    else\n \
    echo -e "`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 "\n \
    fi\n \
    logger -t "devkit-ide" [$1] [$2] $3\n \
    }\n \
    function signature(){\n \
    if [ ! -f "$1" ];then\n \
    Logger Error "Signature" "Signature file is invalid.\n \
    KEYS download url is: ${key_url}\n \
    Asc download url is: ${pkg_url}.asc\n \
    Logger "${key_url}"\n \
    Logger "${pkg_url}"\n \
    You can download ${pkg_name}.asc and KEYS.txt to save to path $path"\n \
    exit 2\n \
    fi\n \
    command -v gpg\n \
    if [ $? != 0 ];then\n \
    Logger Error "Signature" "You need to install signature tool gpg first."\n \
    exit 2\n \
    fi\n \
    command -v expect\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Download" "You need to install shell tool expect first."\n \
    exit 2\n \
    fi\n \
    gpg --import "$path/KEYS.txt"\n \
    gpg --fingerprint\n \
    /usr/bin/expect <<EOF\n \
    set timeout -1\n \
    gpg --edit-key " OpenPGP signature key for Huawei software (created on 30th Dec2013) " trust\n\
    expect "Your decision?"\n\
    send "5\n\
    "\n\
    expect "Do you really want to set this key to ultimate trust? (y/N)"\n\
    send "y\n\
    "\n\
    expect "gpg>"\n\
    send "quit\n\
    "\n\
    expect eof\n\
    EOF\n\
    result=$(gpg --verify "$1")\n\
    if [[ $result =~ "This key is not certified with a trusted signature" ]];then\n \
    Logger Error "Signature" "This key is not certified with a trusted signature."\n \
    exit 2\n \
    elif [[ $result =~ "Good signature" ]];then\n \
    Logger Step "Signature" "Signature passed successfully."\n \
    exit 0\n \
    elif [[ $result =~ "BAD signature" ]];then\n \
    Logger Error "Signature" "Signature failed.please check the completion of package."\n \
    exit 2\n \
    elif [[ $result =~ "Can't check signature: public key not found" ]];then\n \
    Logger Error "Signature" "Can't check signature: public key not found."\n \
    exit 2\n \
    elif [[ $result =~ "can't hash datafile: No data" ]];then\n \
    Logger Error "Signature" "Cannot find the download package.please make sure it is in the same folder with signature file "\n \
    exit 2\n \
    fi\n \
    }\n \
    # Start\n \
    Logger Step "Start" "Start install hyper tuner."\n \
    # Step1.Check Env\n \
    Logger Step "Check Env" "Start to check if hyper_tuner already installed."\n \
    if [ -f "/etc/systemd/system/thor.service" ] || [ -f "/etc/init.d/thor" ]; then\n \
    Logger Error "Check Env" "Toolkit hyper_tuner already installed, task is exiting..."\n \
    exit 2\n \
    fi\n \
    Logger Step "Check Env" "End to check if hyper_tuner already installed successfully."\n \
    Logger Step "Check Env" "Start to check cpu mode of x86 or arm."\n \
    if [[ $(uname -a) =~ "x86" ]]; then\n \
    Logger Step "Check Env" "It is x86 host."\n \
    pkg_url=$x86\n \
    else\n \
    Logger Step "Check Env" "It is arm host."\n \
    pkg_url=$arm\n \
    Logger "${pkg_url}"\n \
    fi\n \
    pkg_name=$(echo ${pkg_url} | awk -F "Packages/" '{print $2}')\n \
    if [[ ${pkg_name} =~ "Hyper-Tuner" ]];then\n \
    pkg_file="Hyper_tuner"\n \
    else\n \
    pkg_file="Tuning_kit"\n \
    fi\n \
    curl_url=$(echo ${pkg_url} | awk -F "/Tuning" '{print $1}')\n \
    key_url=$(echo ${key} | sed 's/%26/\\&/g')\n \
    Logger "${pkg_name}"\n \
    Logger "${pkg_file}"\n \
    Logger "${curl_url}"\n \
    Logger "${key_url}"\n \
    Logger Step "Check Env" "End to check cpu mode of x86 or arm."\n \
    if [ ! -f "$path/${pkg_name}" ];then\n \
    Logger Step "Check Env" "Start to check network connection"\n \
    function install_curl(){\n \
    apt install -y curl 2>/dev/null\n \
    if [ $? != 0 ]; then\n \
    yum install -y curl 2>/dev/null\n \
    fi\n \
    }\n \
    curl --help >/dev/null 2>&1\n \
    if [ $? != 0 ]; then\n \
    install_curl\n \
    fi\n \
    Logger "${curl_url}"\n \
    curl -ksSL --connect-timeout 5 -I ${curl_url}\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Check Env" "Network issue, please check connection.\n \
    Package download url is: ${pkg_url}\n \
    KEYS download url is: ${key_url}\n \
    Asc download url is: ${pkg_url}.asc\n \
    You can download ${pkg_name}, ${pkg_name}.asc and KEYS.txt save to path $path"\n \
    exit 2\n \
    fi\n \
    Logger Step "Check Env" "End to check network connection successfully."\n \
    Logger Step "Check Env" "Start to check target package url"\n \
    if [[ $(curl -ksSL --connect-timeout 5 -I ${pkg_url}) =~ "404 Not Found" ]]; then\n \
    Logger Error "Check Env" "Target url is not exist, please check. url: ${pkg_url}"\n \
    exit 3\n \
    fi\n \
    Logger Step "Check Env" "End to check target package url successfully."\n \
    # Step2.Download\n \
    Logger Step "Download" "Start to download hyper_tuner package."\n \
    cd $path && curl "${pkg_url}" -O\n \
    chmod 000 ${pkg_name}\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Download" "Download package failed, please check detail."\n \
    clean\n \
    exit 4\n \
    fi\n \
    Logger Step "Download" "End to download hyper_tuner package successfully."\n \
    Logger Step "Download" "Start to download hyper_tuner asc."\n \
    curl "${pkg_url}.asc" -O\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Download" "Download asc failed please check detail."\n \
    clean\n \
    exit 4\n \
    fi\n \
    Logger Step "Download" "End to download asc successfully."\n \
    Logger Step "Download" "Start to download KEYS."\n \
    curl -s "${key_url}" -o KEYS.txt\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Download" "Download KEYS failed please check detail."\n \
    clean\n \
    exit 4\n \
    fi\n \
    Logger Step "Download" "End to download KEYS successfully."\n \
    fi\n \
    signature $path/${pkg_name}.asc\n \
    # Step3.Decompression\n \
    Logger Step "Decompression" "Start to check Space required for extract hyper_tuner package."\n \
    pkg_space=2147483648\n \
    if [[ $(tar tvf ${pkg_name} | awk \'{print $3, $6}\' | awk \'{sum += $1} END {print sum}\') -gt ${pkg_space} ]]; then\n \
    Logger Error "Decompression" "The space required for decompressing the package is incorrect."\n \
    exit 2\n \
    else\n \
    Logger Step "Decompression" "End to check Space required for extract hyper_tuner package."\n \
    fi\n \
    Logger Step "Decompression" "Start to extract hyper_tuner package."\n \
    cd $path && tar zxf ${pkg_name}\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Decompression" "Extract package failed, please check detail."\n \
    clean\n \
    exit 5\n \
    fi\n \
    Logger Step "Decompression" "End to extract hyper_tuner package successfully."\n \
    # Step4.Install\n \
    Logger Step "Install" "Start to install hyper_tuner package."\n \
    Logger $path/${pkg_file}\n \
    cd $path/${pkg_file} && bash install.sh -ide\n \
    if [ $? != 0 ];then\n \
    Logger Error "Install" "Install package failed, please check detail logs above."\n \
    clean\n \
    # Clean environment\n \
    cd $(cat /home/auto_malluma/Hyper_tuner/Hyper_tuner/install.ini | grep INSTALL_PATH | cut -d '=' -f2)\n \
    bash hyper_tuner_uninstall.sh -ide\n \
    clean\n \
    exit 6\n \
    else\n \
    Logger Step "Install" "End to install hyper_tuner package successfully."\n \
    fi\n \
    # Step5.Check Firewall Status\n \
    Logger Step "Check Firewall Status" "Start to check the firewall status."\n \
    port=$(grep listen $(find /opt/ -name 'nginx.conf') | awk '{print $2}' | cut -d ':' -f 2  |  sed -e 's/;//g')\n \
    # echo  "port ==> ${port}" \n \
    port=$(expr substr "${port}" 1 4) \n \
    # echo  "after substr, port ==> ${port}" \n \
    if [ "$(firewall-cmd --state 2>&1)" == "not running" ]; then\n \
    echo -e "\\e[33mThe firewall is not enabled, but it does not affect the use of the tool.\n \
    If you want to enable the firewall, run the following command to enable port ${port}:\n \
    firewall-cmd --add-port=${port}/tcp --permanent && firewall-cmd --reload\\e[0m"\n \
    elif [ "$(firewall-cmd --query-port=${port}/tcp)" == "no" ]; then\n \
    echo -e "\\e[1;31mPlease enable the firewall port: ${port}. execute: firewall-cmd --add-port=${port}/tcp --permanent && firewall-cmd --reload\\e[0m"\n \
    fi\n \
    exit 7\n \
    Logger Step "Check Firewall Status" "End to check the firewall status."\n \
    # Step6.Clean Env\n \
    #Logger Step "Clean Env" "Start to clean environment."\n \
    #cd $path && rm -rf ${pkg_name} ${pkg_name%.*.*}\n \
    #if [ $? != 0 ]; then\n \
    #Logger Error "Clean Env" "Clean env failed, please check detail."\n \
    #clean\n \
    #exit 7\n \
    #fi\n \
    history -cw\n \
    Logger Step "Clean Env" "End to clean environment successfully."\n \
    # End\n \
    Logger Step "End" "All steps finished successfully."\n \
    clean
#\u5378\u8F7D
plugins_hyper_tuner_uninstall_failedPrefix=<html>\u5DE5\u5177\u5378\u88C5\u5931\u8D25\u3002\u70B9\u51FB<a href="%23">
plugins_hyper_tuner_uninstall_failedLink=\u6B64\u5904
plugins_hyper_tuner_uninstall_failedSuffix=</a>\u91CD\u8BD5\u3002</html>
plugins_hyper_tuner_uninstall_title=\u5378\u8F7D\u6027\u80FD\u5206\u6790\u5DE5\u5177
plugins_hyper_tuner_uninstall_success=\u5378\u8F7D\u6210\u529F
plugins_hyper_tuner_shell_uninstall=#!/bin/bash\n \
    source /etc/profile\n \
    path=$(cd `dirname $0`;pwd)\n \
    touch $path/uninstall_tuning.log\n \
    chmod 600 $path/uninstall_tuning.log\n \
    function clean(){\n \
    rm -rf $path/uninstall_tuning.sh\n \
    rm -rf $path/uninstall_tuning_log.sh\n \
    }\n \
    function Logger(){\n \
    if [ "Error" == $1 ]; then\n \
    clean\n \
    echo -e "\\e[1;31m`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 \\e[0m "\n \
    echo "failed" > $path/uninstall_porting.log\n \
    else\n \
    echo -e "`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 "\n \
    fi\n \
    logger -t "devkit-ide" [$1] [$2] $3\n \
    }\n \
    #Step1. UnInstall\n \
    Logger Step "UnInstall" "Start to uninstall hyper_tuner package."\n \
    if [ "$USER" != "root" ]; then\n \
    echo -e "\\e[1;31mPlease input your root password to start uninstalling:\\e[0m"\n \
    fi\n \
    su - root -c "cd $path && bash uninstall_tuning_log.sh "$USER" $path"\n \
    if [ $? == 1 ];then\n \
    Logger Error "Check Password" "Check Password failed, please check detail."\n \
    exit 1\n \
    fi\n \
    rm -rf $0
plugins_hyper_tuner_shell_uninstallLog=#!/bin/bash\n \
    path=$2\n \
    function clean(){\n \
    rm -rf $path/uninstall_porting.sh\n \
    rm -rf $path/uninstall_porting_log.sh\n \
    }\n \
    function Logger(){\n \
    if [ "Error" == $1 ]; then\n \
    echo -e "\\e[1;31m`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 \\e[0m "\n \
    echo "failed" > $path/uninstall_tuning.log\n \
    clean\n \
    else\n \
    echo -e "`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 "\n \
    fi\n \
    logger -t "devkit-ide" [$1] [$2] $3\n \
    }\n \
    workdirectory=$(service thor status | grep hyper_tuner | awk 'NR==1{print $3}' | awk -F "/hyper_tuner/" '{print $1}')\n \
    workdirectory=`echo $workdirectory | sed 's/(//g'` \n \
    Logger "$workdirectory" \n \
    if [ ! -d "$workdirectory/hyper_tuner" ];then\n \
    Logger Error "UnInstall" "The tool is uninstalled. Do not uninstall it again."\n \
    exit 2\n \
    fi\n \
    Logger "$workdirectory/hyper_tuner"\n \
    cd $workdirectory/hyper_tuner\n \
    bash hyper_tuner_uninstall.sh\n \
    if [ $? != 0 ];then\n \
    Logger Error "UnInstall" "UnInstall package failed, please check detail logs above."\n \
    exit 3\n \
    else\n \
    Logger Step "UnInstall" "End to uninstall hyper_tuner package successfully."\n \
    echo "success" > $path/uninstall_tuning.log\n \
    clean\n \
    fi\n \
    rm -rf $0
#\u5347\u7EA7
plugins_hyper_tuner_upgrade_title=\u5347\u7EA7\u6027\u80FD\u5206\u6790\u5DE5\u5177
plugins_hyper_tuner_upgrade_failedPrefix=<html><span>\u8BF7\u53C2\u8003<a style="color:rgb(47, 101, 202);" href="https://support.huaweicloud.com/faq-paplugin-kunpengdevps/kunpengpaplugin_10_0029.html">\u5B98\u7F51</a>\u4E0A\u7684\u5347\u7EA7\u5931\u8D25\u53EF\u80FD\u539F\u56E0\u8FDB\u884C\u5904\u7406</span><br />\u5DE5\u5177\u5347\u7EA7\u5931\u8D25\u3002\u70B9\u51FB<a href="%23">
plugins_hyper_tuner_upgrade_failedLink=\u6B64\u5904
plugins_hyper_tuner_upgrade_failedSuffix=</a>\u91CD\u8BD5\u3002</html>
plugins_hyper_tuner_upgrade_success=\u5DE5\u5177\u5347\u7EA7\u6210\u529F
plugins_hyper_tuner_shell_upgradel=#!/bin/bash\n \
    function help_info(){\n \
    echo "usage bash upgrade_tuning.sh\n \
    -a arm\n \
    -b x86\n \
    -c key\n \
    -h help information"\n \
    }\n \
    #get opts\n \
    while getopts ":a:b:c:h" args\n \
    do\n \
    case $args in\n \
    a)\n \
    arm=$OPTARG\n \
    ;;\n \
    b)\n \
    x86=$OPTARG\n \
    ;;\n \
    c)\n \
    key=$OPTARG\n \
    ;;\n \
    h)\n \
    help_info\n \
    exit 0\n \
    ;;\n \
    ?)\n \
    echo "unknow option '-$OPTARG'"\n \
    help_info\n \
    exit 2\n \
    ;;\n \
    esac\n \
    done\n \
    path=$(cd `dirname $0`;pwd)\n \
    source /etc/profile\n \
    touch $path/upgrade_tuning.log\n \
    chmod 600 $path/upgrade_tuning.log\n \
    function clean() {\n \
    rm -rf $path/upgrade_tuning_run.sh\n \
    rm -rf $path/upgrade_tuning.sh\n \
    }\n \
    function Logger() {\n \
    if [ "Error" == $1 ]; then\n \
    clean\n \
    echo -e "\\e[1;31m`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 \\e[0m "\n \
    echo "failed" > $path/upgrade_tuning.log\n \
    else\n \
    echo -e "`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 "\n \
    fi\n \
    logger -t "devkit-ide" [$1] [$2] $3\n \
    }\n \
    if [ "$USER" != "root" ]; then\n \
    echo -e "\\e[1;31mPlease input your root password to start upgrading:\\e[0m"\n \
    fi\n \
    su - root -c "cd $path && bash upgrade_tuning_run.sh -a $arm -b $x86 -c $path -d ${key} "$USER""\n \
    if [ $? == 1 ];then\n \
    Logger Error "Check Password" "Check Password failed, please check detail."\n \
    exit 1\n \
    fi
plugins_hyper_tuner_shell_upgradelRun=#!/bin/bash\n \
    function help_info(){\n \
    echo "usage bash upgrade_tuning.sh\n \
    -a arm\n \
    -b x86\n \
    -c path\n \
    -d key\n \
    -h help information"\n \
    }\n \
    #get opts\n \
    while getopts ":a:b:c:d:h" args\n \
    do\n \
    case $args in\n \
    a)\n \
    arm=$OPTARG\n \
    ;;\n \
    b)\n \
    x86=$OPTARG\n \
    ;;\n \
    c)\n \
    path=$OPTARG\n \
    ;;\n \
    d)\n \
    key=$OPTARG\n \
    ;;\n \
    h)\n \
    help_info\n \
    exit 0\n \
    ;;\n \
    ?)\n \
    echo "unknow option '-$OPTARG'"\n \
    help_info\n \
    exit 2\n \
    ;;\n \
    esac\n \
    done\n \
    function clean() {\n \
    rm -rf $path/upgrade_tuning_run.sh\n \
    rm -rf $path/upgrade_tuning.sh\n \
    }\n \
    function ackclean(){\n \
    echo "The installation package path is $path"\n \
    echo -n "Are you sure you want to delete the installation package?(y/n,n is default)"\n \
    read ack\n \
    if [ "y" == "${ack}" ] || [ "Y" == "${ack}" ]; then\n \
    rm -rf $path/Hyper*Tuner*linux*\n \
    rm -rf $path/KEYS.txt\n \
    fi\n \
    }\n \
    function Logger() {\n \
    if [ "Error" == $1 ]; then\n \
    clean\n \
    echo -e "\\e[1;31m`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 \\e[0m "\n \
    echo "failed" > $path/upgrade_tuning.log\n \
    echo "The log path is /var/log/messages. You can delete installation package with\n \
    rm -rf $path/Hyper*Tuner*linux*\n \
    rm -rf $path/KEYS.txt"\n \
    else\n \
    echo -e "`date '+[%Y-%m-%d %H:%M:%S]'` [$1] [$2] $3 "\n \
    fi\n \
    logger -t "devkit-ide" [$1] [$2] $3\n \
    }\n \
    function signature(){\n \
    if [ ! -f "$1" ];then\n \
    Logger Error "Signature" "Signature file is invalid.\n \
    KEYS download url is: ${key_url}\n \
    Asc download url is: ${pkg_url}.asc\n \
    You can download ${pkg_name}.asc and KEYS.txt to save to path $path"\n \
    exit 2\n \
    fi\n \
    command -v gpg\n \
    if [ $? != 0 ];then\n \
    Logger Error "Signature" "You need to install signature tool gpg first."\n \
    exit 2\n \
    fi\n \
    command -v expect\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Download" "You need to install shell tool expect first."\n \
    exit 2\n \
    fi\n \
    gpg --import "$path/KEYS.txt"\n \
    gpg --fingerprint\n \
    /usr/bin/expect <<EOF\n \
    set timeout -1\n \
    gpg --edit-key " OpenPGP signature key for Huawei software (created on 30th Dec2013) " trust\n\
    expect "Your decision?"\n\
    send "5\n\
    "\n\
    expect "Do you really want to set this key to ultimate trust? (y/N)"\n\
    send "y\n\
    "\n\
    expect "gpg>"\n\
    send "quit\n\
    "\n\
    expect eof\n\
    EOF\n\
    result=$(gpg --verify "$1")\n\
    if [[ $result =~ "This key is not certified with a trusted signature" ]];then\n \
    Logger Error "Signature" "This key is not certified with a trusted signature."\n \
    exit 2\n \
    elif [[ $result =~ "Good signature" ]];then\n \
    Logger Step "Signature" "Signature passed successfully."\n \
    exit 0\n \
    elif [[ $result =~ "BAD signature" ]];then\n \
    Logger Error "Signature" "Signature failed.please check the completion of package."\n \
    exit 2\n \
    elif [[ $result =~ "Can't check signature: public key not found" ]];then\n \
    Logger Error "Signature" "Can't check signature: public key not found."\n \
    exit 2\n \
    elif [[ $result =~ "can't hash datafile: No data" ]];then\n \
    Logger Error "Signature" "Cannot find the download package.please make sure it is in the same folder with signature file "\n \
    exit 2\n \
    fi\n \
    }\n \
    # Start\n \
    Logger Step "Start" "Start upgrade hyper tuner."\n \
    # Step1.Check Env\n \
    Logger Step "Check Env" "Start to check if hyper_tuner has been installed."\n \
    if [ ! -f "/etc/systemd/system/thor.service" ] && [ ! -f "/etc/init.d/thor" ]; then\n \
    Logger Error "Check Env" "Toolkit hyper_tuner has not been installed, please install first, task is exiting..."\n \
    exit 2\n \
    fi\n \
    Logger Step "Check Env" "End to check if hyper_tuner has been installed successfully."\n \
    Logger Step "Check Env" "Start to check cpu mode of x86 or arm."\n \
    if [[ $(uname -a) =~ "x86" ]]; then\n \
    Logger Step "Check Env" "It is x86 host."\n \
    pkg_url=$x86\n \
    else\n \
    Logger Step "Check Env" "It is arm host."\n \
    pkg_url=$arm\n \
    fi\n \
    pkg_name=$(echo ${pkg_url} | awk -F "Packages/" '{print $2}')\n \
    if [[ ${pkg_name} =~ "Hyper-Tuner" ]];then\n \
    pkg_file="Hyper_tuner"\n \
    else\n \
    pkg_file="Tuning_kit"\n \
    fi\n \
    #pkg_file=$(echo ${pkg_name} | awk -F ".tar.gz" '{print $1}')\n \
    curl_url=$(echo ${pkg_url} | awk -F "/Tuning" '{print $1}')\n \
    key_url=$(echo ${key} | sed 's/%26/\\&/g')\n \
    Logger Step "Check Env" "End to check cpu mode of x86 or arm."\n \
    if [ ! -f "$path/${pkg_name}" ];then\n \
    Logger Step "Check Env" "Start to check network connection"\n \
    function install_curl(){\n \
    apt install -y curl 2>/dev/null\n \
    if [ $? != 0 ]; then\n \
    yum install -y curl 2>/dev/null\n \
    fi\n \
    }\n \
    curl --help >/dev/null 2>&1\n \
    if [ $? != 0 ]; then\n \
    install_curl\n \
    fi\n \
    curl -ksSL --connect-timeout 5 -I  ${curl_url}\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Check Env" "Network issue, please check connection.\n \
    Package download url is: ${pkg_url}\n \
    KEYS download url is: ${key_url}\n \
    Asc download url is: ${pkg_url}.asc\n \
    You can download ${pkg_name}, ${pkg_name}.asc and KEYS.txt save to path $path"\n \
    exit 2\n \
    fi\n \
    Logger Step "Check Env" "End to check network connection successfully."\n \
    Logger Step "Check Env" "Start to check target package url"\n \
    if [[ $(curl -ksSL --connect-timeout 5 -I ${pkg_url}) =~ "404 Not Found" ]]; then\n \
    Logger Error "Check Env" "Target url is not exist, please check. url: ${pkg_url}"\n \
    exit 3\n \
    fi\n \
    Logger Step "Check Env" "End to check target package url successfully."\n \
    # Step2.Download\n \
    Logger Step "Download" "Start to download hyper_tuner package."\n \
    cd $path && curl "${pkg_url}" -O\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Download" "Download package failed, please check detail."\n \
    clean\n \
    exit 4\n \
    fi\n \
    Logger Step "Download" "End to download hyper_tuner package successfully."\n \
    Logger Step "Download" "Start to download hyper_tuner asc."\n \
    curl "${pkg_url}.asc" -O\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Download" "Download asc failed please check detail."\n \
    clean\n \
    exit 4\n \
    fi\n \
    Logger Step "Download" "End to download asc successfully."\n \
    Logger Step "Download" "Start to download KEYS."\n \
    curl -s "${key_url}" -o KEYS.txt\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Download" "Download KEYS failed please check detail."\n \
    clean\n \
    exit 4\n \
    fi\n \
    Logger Step "Download" "End to download KEYS successfully."\n \
    fi\n \
    signature $path/${pkg_name}.asc\n \
    # Step3.Decompression\n \
    Logger Step "Decompression" "Start to check Space required for extract hyper_tuner package."\n \
    pkg_space=2147483648\n \
    if [[ $(tar tvf ${pkg_name} | awk \'{print $3, $6}\' | awk \'{sum += $1} END {print sum}\') -gt ${pkg_space} ]]; then\n \
    Logger Error "Decompression" "The space required for decompressing the package is incorrect."\n \
    exit 2\n \
    else\n \
    Logger Step "Decompression" "End to check Space required for extract hyper_tuner package."\n \
    fi\n \
    Logger Step "Decompression" "Start to extract hyper_tuner package."\n \
    cd $path && tar zxf ${pkg_name}\n \
    if [ $? != 0 ]; then\n \
    Logger Error "Decompression" "Extract package failed, please check detail."\n \
    clean\n \
    exit 5\n \
    fi\n \
    Logger Step "Decompression" "End to extract hyper_tuner package successfully."\n \
    # Step4.Upgrade\n \
    Logger Step "Upgrade" "Start to upgrade hyper_tuner package."\n \
    Logger Step "------ $path/Hyper_tuner/${pkg_name}.tar.gz"\n \
    cd /opt/hyper_tuner && ./Upgrade upgrade $path/Hyper_tuner/${pkg_name}\n \
    if [ $? != 0 ];then\n \
    Logger Error "Upgrade" "Upgrade package failed, please check detail logs above."\n \
    clean\n \
    # Clean environment\n \
    #cd $(cat /home/auto_malluma/Hyper_tuner/Hyper_tuner/install.ini | grep INSTALL_PATH | cut -d '=' -f2)\n \
    cd /opt/hyper_tuner/  \n \
    bash hyper_tuner_uninstall.sh -ide\n \
    exit 6\n \
    else\n \
    Logger Step "Upgrade" "End to upgrade Hyper_tuner package successfully."\n \
    fi\n \
    # Step5.Check Firewall Status\n \
    Logger Step "Check Firewall Status" "Start to check the firewall status."\n \
    port=$(grep listen $(find /opt/ -name 'nginx.conf') | awk '{print $2}' | cut -d ':' -f 2  |  sed -e 's/;//g')\n \
    # echo  "port ==> ${port}" \n \
    port=$(expr substr "${port}" 1 4) \n \
    # echo  "after substr, port ==> ${port}" \n \
    if [ "$(firewall-cmd --state 2>&1)" == "not running" ]; then\n \
    echo -e "\\e[33mThe firewall is not enabled, but it does not affect the use of the tool.\n \
    If you want to enable the firewall, run the following command to enable port ${port}:\n \
    firewall-cmd --add-port=${port}/tcp --permanent && firewall-cmd --reload\\e[0m"\n \
    elif [ "$(firewall-cmd --query-port=${port}/tcp)" == "no" ]; then\n \
    echo -e "\\e[1;31mPlease enable the firewall port: ${port}. execute: firewall-cmd --add-port=${port}/tcp --permanent && firewall-cmd --reload\\e[0m"\n \
    fi\n \
    exit 7\n \
    Logger Step "Check Firewall Status" "End to check the firewall status."\n \
    # Step6.Clean Env\n \
    #Logger Step "Clean Env" "Start to clean environment."\n \
    #cd $path && rm -rf ${pkg_name} ${pkg_name%.*.*}\n \
    #if [ $? != 0 ]; then\n \
    #Logger Error "Clean Env" "Clean env failed, please check detail."\n \
    #clean\n \
    #exit 8\n \
    #fi\n \
    history -cw\n \
    Logger Step "Clean Env" "End to clean environment successfully."\n \
    # End\n \
    Logger Step "End" "All steps finished successfully."\n \
    clean
plugins_common_message_responseError_viewDetail=\u4FEE\u590D\u5EFA\u8BAE
plugins_common_message_responseError_messageSuffix=</a></html>
plugins_porting_upgrade_title=\u5347\u7EA7\u4EE3\u7801\u8FC1\u79FB\u5DE5\u5177
plugins_hyper_tuner_title_log_in=\u767B\u5F55
#\u672A\u914D\u7F6E\u8FDC\u7AEF\u670D\u52A1\u5668\u4E3B\u7A97\u53E3\u663E\u793A
plugins_hyper_tuner_lefttree_server_not_connected=\u60A8\u8FD8\u672A\u8FDE\u63A5\u8FDC\u7AEF\u670D\u52A1\u5668
plugins_hyper_tuner_lefttree_server_config_now=\u914D\u7F6E\u670D\u52A1\u5668
plugins_hyper_tuner_lefttree_server_config_again=\u91CD\u65B0\u914D\u7F6E
plugins_hyper_tuner_lefttree_server_config_connected=\u5DF2\u8FDE\u63A5
plugins_hyper_tuner_config_description=\u8BF7\u914D\u7F6E\u6027\u80FD\u5206\u6790\u5DE5\u5177\u7684\u8FDC\u7A0B\u670D\u52A1\u5668\u5730\u5740\uFF0C\u5982\u679C\u5F53\u524D\u60A8\u5C1A\u672A\u5728\u670D\u52A1\u5668\u4E0A\u90E8\u7F72\u5DE5\u5177
plugins_hyper_tuner_config_closure=\u5F53\u524D\u6027\u80FD\u5206\u6790\u5DE5\u5177\u5DF2\u5173\u95ED\uFF0C\u8BF7\u91CD\u65B0\u914D\u7F6E\u670D\u52A1\u5668
#\u5B89\u88C5\u90E8\u7F72\u63D0\u793A\u5F39\u6846
plugins_hyper_tuner_message_beforeInstallTitle=<html><body><div><p align="left">\u5728\u5F00\u59CB\u5B89\u88C5\u4E4B\u524D\uFF0C\u8BF7\u4ED4\u7EC6\u9605\u8BFB\u4EE5\u4E0B\u5185\u5BB9\uFF1A<br/></p></div></body></html>
plugins_hyper_tuner_message_beforeInstallDsc=<html><body>\
  <div style="color:rgb({0},{1},{2});font-family:{3};font-size:{4}"><p align="left">\
  1. \u672C\u5DE5\u5177\u4F1A\u57FA\u4E8E\u60A8\u6240\u586B\u5199\u7684\u4FE1\u606F\uFF08IP\uFF0C\u7AEF\u53E3\uFF0C\u7528\u6237\u540D\uFF0C\u5BC6\u7801\u7B49\uFF09\uFF0C\u4EE5\u8BC6\u522B\u60A8\u7684\u7CFB\u7EDF\u72B6\u6001\uFF0C\u5B9E\u73B0\u672C\u5DE5\u5177\u7684\u4E00\u952E\u90E8\u7F72\u3002\
  \u672C\u5DE5\u5177\u4E0D\u4F1A\u5C06\u8FD9\u4E9B\u4FE1\u606F\u7528\u4E8E\u5176\u4ED6\u76EE\u7684\uFF0C\u4E5F\u4E0D\u4F1A\u5C06\u5176\u4F20\u8F93\u5230\u670D\u52A1\u5668\u4EE5\u5916\u3002<br/>\
  \
  2. \u5F53\u4F60\u4F7F\u7528\u672C\u5DE5\u5177\u65F6\uFF0C\u672C\u5DE5\u5177\u4F1A\u81EA\u52A8\u4E0B\u8F7D\u5E76\u5B89\u88C5\u4F9D\u8D56\u7684\u8F6F\u4EF6\u5B89\u88C5\u5305,\
  \u5176\u4E2D\u53EF\u80FD\u5305\u542B\u6765\u81EA\u7B2C\u4E09\u65B9\u7684\u8F6F\u4EF6\u3002\u4E0A\u8FF0\u6765\u81EA\u7B2C\u4E09\u65B9\u7684\u8F6F\u4EF6\u5747\u6309\u7167\u201C\u5982\u662F\u201D\u6807\u51C6\u63D0\u4F9B\uFF0C\u6211\u4EEC\u5BF9\u8FD9\u4E9B\u8F6F\u4EF6\u4E0D\u627F\u62C5\u4EFB\u4F55\u8D23\u4EFB\u3002<br/>\
  <br/>\
  3. \u5F53\u4F60\u4F7F\u7528\u672C\u5DE5\u5177\u65F6\uFF0C\u672C\u5DE5\u5177\u4F1A\u4E0B\u8F7D\u5E76\u5B89\u88C5\u5FC5\u8981\u7684\u5B89\u88C5\u5305\u548C\u5305\u6821\u9A8C\u5DE5\u5177\uFF0C\u5176\u4E2D\u53EF\u80FD\u5305\u542B\u6765\u81EA\u534E\u4E3A\u76F8\u5173\u7F51\u7AD9\u7684\u4E0B\u8F7D\u5185\u5BB9\u3002\u76F8\u5173URL\u5730\u5740\u5982\u4E0B\uFF1A<br/>\
  <a style="text-decoration:none;color:rgb(47,101,202);"; href="https://mirror.iscas.ac.cn/kunpeng/archive/Tuning_kit/Packages/Hyper-Tuner-2.3.T10.tar.gz">\
  \u5B89\u88C5\u5305\u4E0B\u8F7D\u94FE\u63A5</a>&nbsp;&nbsp;\
  <a style="text-decoration:none;color:rgb(47,101,202);"; href="https://download.hua\
    wei.com/edownload/e/download.do?actionFlag=download%26mid=SUPE_SERTOOL_VERSION%26nid=TV1100000147%26partNo=2005">\
  \u5305\u6821\u9A8C\u5DE5\u5177\u4E0B\u8F7D\u94FE\u63A5</a>\
  </p><br/><br/><br/><br/><br/></div></body></html>

#\u914D\u7F6E\u8FDC\u7A0B\u670D\u52A1\u5668\u65F6\u9009\u62E9\u8BC1\u4E66\u63D0\u793A
plugins_hyper_tuner_config_saveConfirm_title=\u4FDD\u5B58\u914D\u7F6E
plugins_common_message_localFileNotExist=\u672C\u5730\u6587\u4EF6\u4E0D\u5B58\u5728\u3002
#\u767B\u5F55\u63D0\u793A
plugins_hyper_tuner_login_help_url=https://support.huaweicloud.com/intellij-kunpengdevps/kunpengideintellij_10_0167.html
plugins_hyper_tuner_login_other=\u60A8\u5DF2\u5728\u5176\u4ED6\u7EC8\u7AEF\u767B\u5F55\uFF0C\u8BF7\u786E\u8BA4\u5E76\u91CD\u65B0\u767B\u5F55
plugins_hyper_tuner_login_needLoginTitle=\u767B\u5F55\u8D85\u65F6\u6216\u60A8\u8FD8\u672A\u767B\u5F55
plugins_hyper_tuner_login_needLogin=\u8BF7\u767B\u5F55
#\u5173\u4E8E
plugins_hyper_tuner_about_product_title=\u5173\u4E8E
plugins_hyper_tuner_about_product_info=\u9CB2\u9E4F\u6027\u80FD\u5206\u6790\u5DE5\u5177
plugins_hyper_tuner_about_product_version=\u7248\u672C V2.3.T10
plugins_hyper_tuner_about_product_release_time=\u53D1\u5E03\u65F6\u95F4\uFF1A2021.09.30
plugins_common_message_responseError_messagePrefix=<html><span>\u670D\u52A1\u5668\u672A\u54CD\u5E94\uFF0C\u8BF7\u786E\u8BA4\u670D\u52A1\u5668\u7AEF\u5DE5\u5177\u5DF2\u90E8\u7F72\u4E14\u7F51\u7EDC\u8FDE\u63A5\u6B63\u5E38\u3002</span><br /><a href="%23">
plugins_common_hyper_tuner_user_disclaimer_head=\u60A8\u4E00\u65E6\u786E\u8BA4\u672C\u58F0\u660E\uFF0C\u5373\u89C6\u4E3A\u60A8\u7406\u89E3\u5E76\u540C\u610F\u4E86\u672C\u58F0\u660E\u7684\u5168\u90E8\u5185\u5BB9\uFF1A
plugins_common_hyper_tuner_user_disclaimer_content=<html><body>\
  <div style="color:rgb({0},{1},{2});font-family:{3};font-size:{4}">\
  <p align="left">\
  1. \u5EFA\u8BAE\u60A8\u5728\u975E\u751F\u4EA7\u73AF\u5883\u4F7F\u7528\u672C\u5DE5\u5177\uFF0C\u907F\u514D\u5F71\u54CD\u751F\u4EA7\u4E1A\u52A1\u8FD0\u884C <br/><br/>\
  2. \u4F7F\u7528\u8FC7\u7A0B\u4E2D\u6D89\u53CA\u7684\u975E\u5DE5\u5177\u672C\u8EAB\u9A8C\u8BC1\u529F\u80FD\u6240\u7528\u7684\u7528\u6237\u540D\u548C\u5BC6\u7801\uFF0C\u4E0D\u4F5C\u4ED6\u7528\uFF0C\u4E0D\u4F1A\u88AB\u4FDD\u5B58\u5728\u7CFB\u7EDF\u4E2D<br/><br/>\
  3. \u60A8\u5206\u6790\u6216\u64CD\u4F5C\u524D\u5DF2\u786E\u8BA4\u60A8\u4E3A\u5E94\u7528\u7A0B\u5E8F\u7684\u6240\u6709\u8005\u6216\u8005\u5DF2\u83B7\u5F97\u6240\u6709\u8005\u7684\u5145\u8DB3\u6388\u6743\u540C\u610F<br/><br/>\
  4. \u5206\u6790\u7ED3\u679C\u4E2D\u53EF\u80FD\u5305\u542B\u60A8\u6240\u5206\u6790\u5E94\u7528\u7684\u5185\u90E8\u4FE1\u606F\u548C\u76F8\u5173\u6570\u636E\uFF0C\u8BF7\u59A5\u5584\u7BA1\u7406<br/><br/>\
  5. \u9664\u975E\u6CD5\u5F8B\u6CD5\u89C4\u6216\u53CC\u65B9\u5408\u540C\u53E6\u6709\u89C4\u5B9A\uFF0C\u534E\u4E3A\u5BF9\u5206\u6790\u7ED3\u679C\u4E0D\u505A\u4EFB\u4F55\u660E\u793A\u6216\u6697\u793A\u7684\u58F0\u660E\u6216\u4FDD\u8BC1\uFF0C\u4E0D\u5BF9\u5206\u6790\u7ED3\u679C\u7684\u9002\u9500\u6027\u3001\u6EE1\u610F\u5EA6\u3001\u975E\u4FB5\u6743\u6027\u6216\u7279\u5B9A\u7528\u9014\u9002\u7528\u6027\u7B49\u505A\u51FA\u4EFB\u4F55\u4FDD\u8BC1\u6216\u627F\u8BFA<br/><br/>\
  6. \u60A8\u6839\u636E\u5206\u6790\u8BB0\u5F55\u6240\u91C7\u53D6\u7684\u4EFB\u4F55\u884C\u4E3A\u5747\u5E94\u7B26\u5408\u6CD5\u5F8B\u6CD5\u89C4\u7684\u8981\u6C42\uFF0C\u5E76\u7531\u60A8\u81EA\u884C\u627F\u62C5\u98CE\u9669<br><br/>\
  7. \u672A\u7ECF\u6240\u6709\u8005\u6388\u6743\uFF0C\u4EFB\u4F55\u4E2A\u4EBA\u6216\u7EC4\u7EC7\u5747\u4E0D\u5F97\u4F7F\u7528\u5E94\u7528\u7A0B\u5E8F\u53CA\u76F8\u5173\u5206\u6790\u8BB0\u5F55\u4ECE\u4E8B\u4EFB\u4F55\u6D3B\u52A8\u3002\u534E\u4E3A\u4E0D\u5BF9\u7531\u6B64\u9020\u6210\u7684\u4E00\u5207\u540E\u679C\u8D1F\u8D23\uFF0C\u4EA6\u4E0D\u627F\u62C5\u4EFB\u4F55\u6CD5\u5F8B\u8D23\u4EFB\u3002\u5FC5\u8981\u65F6\uFF0C\u5C06\u8FFD\u7A76\u5176\u6CD5\u5F8B\u8D23\u4EFB<br><br/>\
  </p>\
  </div></body></html>
plugins_common_hyper_tuner_user_disclaimer_tips_title=\u63D0\u793A
plugins_common_hyper_tuner_user_disclaimer_refuse_warning=\u4E0D\u540C\u610F\u514D\u8D23\u58F0\u660E\u5C06\u9000\u51FA\u6027\u80FD\u5206\u6790\u5DE5\u5177\uFF0C\u8BF7\u8C28\u614E\u9009\u62E9\uFF01
plugins_hyper_tuner_lefttree_config_server=\u914D\u7F6E\u670D\u52A1\u5668
#\u5DE5\u5177\u7EF4\u62A4
plugins_hyper_tuner_lefttree_maintenance=\u5DE5\u5177\u7EF4\u62A4
plugins_hyper_tuner_lefttree_install=\u5B89\u88C5
plugins_hyper_tuner_lefttree_uninstall=\u5378\u8F7D
plugins_hyper_tuner_lefttree_upgrade=\u5347\u7EA7
plugins_hyper_tuner_name=\u9CB2\u9E4F\u6027\u80FD\u5206\u6790\u5DE5\u5177
plugins_hyper_tuner_feedback=https://bbs.huaweicloud.com/forum/forum-928-1.html
#\u5E2E\u52A9
plugins_hyper_tuner_help=https://support.huaweicloud.com/intellij-kunpengdevps/kunpengideintellij_10_0158.html
plugins_hyper_tuner_default_port=\u9ED8\u8BA4\u7AEF\u53E3\u4E3A8086
plugins_common_message_ipError=\u8BF7\u8F93\u5165\u6B63\u786E\u683C\u5F0F\u7684IP\u5730\u5740
plugins_hyper_tuner_tip_file_upload_failed=\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25:
plugins_hyper_tuner_start_nginx_bat=@echo off\n\
{0}\n\
cd {1}\\nginx\\nginx-1.18.0\n\
tasklist|find /i "nginx.exe"\n\
if %errorlevel%==0 ( \n\
nginx -s reload\n\
exit) else (\n\
start nginx.exe\n\
exit\n\
)
plugins_hyper_tuner_stop_nginx_bat=@echo off\n\
{0}\n\
cd {1}\\nginx\\nginx-1.18.0\n\
title kill nginx service\n\
tasklist | find /i "nginx.exe" || exit\n\
taskkill /im nginx.exe /f\n\
exit
plugins_hyper_tuner_nginx_config=events '{' \n\
  worker_connections  1024; \n\
  '}'\n\
http '{'\n\
    server '{'\n\
        listen       {0};\n\
        server_name  localhost;\n\
        location /java-perf/api/api/ '{'\n\
            proxy_hide_header Allow;\n\
            proxy_hide_header X-Frame-Options;\n\
            proxy_hide_header X-Content-Type-Options;\n\
            proxy_hide_header X-XSS-Protection;\n\
            proxy_hide_header Content-Security-Policy;\n\
            proxy_set_header X-Real-IP $remote_addr;\n\
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
            proxy_pass https://{1}:{2}/java-perf/api/;\n\
         '}'\n\
        location / '{'\n\
            proxy_hide_header Allow;\n\
            proxy_hide_header X-Frame-Options;\n\
            proxy_hide_header X-Content-Type-Options;\n\
            proxy_hide_header X-XSS-Protection;\n\
            proxy_hide_header Content-Security-Policy;\n\
            proxy_set_header X-Real-IP $remote_addr;\n\
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
            proxy_pass https://{1}:{2};\n\
       '}'\n\
    '}' \n\
'}'
# webview \u5728\u7EBF\u5206\u6790 \u5BFC\u5165\u8BC1\u4E66
plugins_hyper_tuner_javaperf_import_caCret=\u5BFC\u5165\u8BC1\u4E66
plugins_hyper_tuner_javaperf_import_caCret_success=\u5BFC\u5165\u8BC1\u4E66\u6210\u529F\u540E\uFF0C\u91CD\u542FIDEA\u751F\u6548
plugins_hyper_tuner_javaperf_import_caCret_fail=\u5BFC\u5165\u8BC1\u4E66\u5931\u8D25\uFF0C\u8BF7\u91CD\u8BD5