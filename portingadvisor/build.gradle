apply from: '../public.gradle'

runIde {
    jbrVersion = null
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
        resources.excludes = ['/dll']
    }
}

prepareSandbox {
    from(['src/main/resources/dll']) {
        into "${intellij.pluginName}"
    }
}

dependencies {
    implementation project(':common')
    implementation project(':js2Java')
    implementation project(':ui')
    implementation project(':images')
}

intellij {
    // version和localPath不要同时指定
    if ("true" == developOption) {
        // localIdeaPath: gradle.properties中指定本地JetBrains IDE产品安装位置，用于本地调试插件
        localPath localIdeaPath
    } else {
        version ideaVersion
        intellijRepo repositories.maven{
            url intellijRepository
            allowInsecureProtocol true
        }.getUrl().path
    }
    // 插件名
    pluginName=portingPluginName
    // 依赖IDEA中内置的插件
    plugins 'terminal'
    // 是否使用patchPluginXml.sinceBuild和patchPluginXml.untilBuild的值替换plugin.xml中since-build和until-build的值，默认true
    updateSinceUntilBuild=false
    // 砂箱目录，构建和运行插件时，idea的config和system存放位置
    sandboxDirectory="ideaSandbox"
}

buildSearchableOptions {
    enabled = false
}

patchPluginXml {
    version = project.version
}


publishPlugin {
    channels = 'Stable'
    token = ''
}
